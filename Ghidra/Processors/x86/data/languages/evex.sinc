# Filter zmm (512 bits sized) variable by qword (64 bits sized) elements

ZmmFilterQ: "" is kreg=0 {
	zmmOut = zmmRes;
}

ZmmFilterQ: "{"kreg"}" is kreg {
	if ((kreg & 1) == 0) goto <filter0>;
		zmmOut[0,64] = zmmRes[0,64];
	<filter0>
	if ((kreg >> 1 & 1) == 0) goto <filter1>;
		zmmOut[64,64] = zmmRes[64,64];
	<filter1>
	if ((kreg >> 2 & 1) == 0) goto <filter2>;
		zmmOut[128,64] = zmmRes[128,64];
	<filter2>
	if ((kreg >> 3 & 1) == 0) goto <filter3>;
		zmmOut[192,64] = zmmRes[192,64];
	<filter3>
	if ((kreg >> 4 & 1) == 0) goto <filter4>;
		zmmOut[256,64] = zmmRes[256,64];
	<filter4>
	if ((kreg >> 5 & 1) == 0) goto <filter5>;
		zmmOut[320,64] = zmmRes[320,64];
	<filter5>
	if ((kreg >> 6 & 1) == 0) goto <filter6>;
		zmmOut[384,64] = zmmRes[384,64];
	<filter6>
	if ((kreg >> 7 & 1) == 0) goto <filter7>;
		zmmOut[448,64] = zmmRes[448,64];
	<filter7>
}

:KMOVW kout, Rmr32 is $(VEX_NONE) & $(VEX_LZ) & $(VEX_0F) & $(VEX_W0); byte=0x92; kout & Rmr32
{
	kout = zext(Rmr32:2);
}

:KMOVW Reg32, kin is $(VEX_NONE) & $(VEX_LZ) & $(VEX_0F) & $(VEX_W0); byte=0x93; kin & Reg32
{
	Reg32 = zext(kin:2);
}

:VMOVDQA64 ZmmReg1 ZmmFilterQ, ZmmReg2_m512 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F) & $(VEX_W1) & ZmmFilterQ; byte=0x6F; ZmmReg1 ... & ZmmReg2_m512 [ evexFactor=0x40; ]
{
	zmmRes = ZmmReg2_m512;
	zmmOut = ZmmReg1;
	build ZmmFilterQ;
	ZmmReg1 = zmmOut;
}

:VMOVDQA64 ZmmReg2_m512 ZmmFilterQ, ZmmReg1 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F) & $(VEX_W1) & ZmmFilterQ; byte=0x7F; ZmmReg1 ... & ZmmReg2_m512 [ evexFactor=0x40; ]
{
	zmmRes = ZmmReg1;
	zmmOut = ZmmReg2_m512;
	build ZmmFilterQ;
	ZmmReg2_m512 = zmmOut;
}

:VMOVDQU64 ZmmReg1 ZmmFilterQ, ZmmReg2_m512 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_F3) & $(VEX_0F) & $(VEX_W1) & ZmmFilterQ; byte=0x6F; ZmmReg1 ... & ZmmReg2_m512 [ evexFactor=0x40; ]
{
	zmmRes = ZmmReg2_m512;
	zmmOut = ZmmReg1;
	build ZmmFilterQ;
	ZmmReg1 = zmmOut;
}

:VMOVDQU64 ZmmReg2_m512 ZmmFilterQ, ZmmReg1 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_F3) & $(VEX_0F) & $(VEX_W1) & ZmmFilterQ; byte=0x7F; ZmmReg1 ... & ZmmReg2_m512 [ evexFactor=0x40; ]
{
	zmmRes = ZmmReg1;
	zmmOut = ZmmReg2_m512;
	build ZmmFilterQ;
	ZmmReg2_m512 = zmmOut;
}

:VPBROADCASTD ZmmReg1, Rmr32 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F38) & $(VEX_W0) & kreg=0; byte=0x7C; mod=0x3 & Rmr32 & ZmmReg1
{
	ZmmReg1[0,32] = Rmr32;
	ZmmReg1[32,32] = Rmr32;
	ZmmReg1[64,32] = Rmr32;
	ZmmReg1[96,32] = Rmr32;
	ZmmReg1[128,32] = Rmr32;
	ZmmReg1[160,32] = Rmr32;
	ZmmReg1[192,32] = Rmr32;
	ZmmReg1[224,32] = Rmr32;
	ZmmReg1[256,32] = Rmr32;
	ZmmReg1[288,32] = Rmr32;
	ZmmReg1[320,32] = Rmr32;
	ZmmReg1[352,32] = Rmr32;
	ZmmReg1[384,32] = Rmr32;
	ZmmReg1[416,32] = Rmr32;
	ZmmReg1[448,32] = Rmr32;
	ZmmReg1[480,32] = Rmr32;
}

:VPCMPGTD kout, vexVVVV_ZmmReg, ZmmReg2 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F) & $(VEX_W0) & vexVVVV_ZmmReg & kreg=0; byte=0x66; ZmmReg2 & kout
{
	kout = 0:8;
	kout[0,1] = vexVVVV_ZmmReg[0,32] s> ZmmReg2[0,32];
	kout[1,1] = vexVVVV_ZmmReg[32,32] s> ZmmReg2[32,32];
	kout[2,1] = vexVVVV_ZmmReg[64,32] s> ZmmReg2[64,32];
	kout[3,1] = vexVVVV_ZmmReg[96,32] s> ZmmReg2[96,32];
	kout[4,1] = vexVVVV_ZmmReg[128,32] s> ZmmReg2[128,32];
	kout[5,1] = vexVVVV_ZmmReg[160,32] s> ZmmReg2[160,32];
	kout[6,1] = vexVVVV_ZmmReg[192,32] s> ZmmReg2[192,32];
	kout[7,1] = vexVVVV_ZmmReg[224,32] s> ZmmReg2[224,32];
	kout[8,1] = vexVVVV_ZmmReg[256,32] s> ZmmReg2[256,32];
	kout[9,1] = vexVVVV_ZmmReg[288,32] s> ZmmReg2[288,32];
	kout[10,1] = vexVVVV_ZmmReg[320,32] s> ZmmReg2[320,32];
	kout[11,1] = vexVVVV_ZmmReg[352,32] s> ZmmReg2[352,32];
	kout[12,1] = vexVVVV_ZmmReg[384,32] s> ZmmReg2[384,32];
	kout[13,1] = vexVVVV_ZmmReg[416,32] s> ZmmReg2[416,32];
	kout[14,1] = vexVVVV_ZmmReg[448,32] s> ZmmReg2[448,32];
	kout[15,1] = vexVVVV_ZmmReg[480,32] s> ZmmReg2[480,32];
}

define pcodeop extractind;
define pcodeop insertind;

:VPCOMPRESSD ZmmReg2_m512 "{"kreg"}", ZmmReg1 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F38) & $(VEX_W0) & kreg; byte=0x8B; ZmmReg1 ... & ZmmReg2_m512
{
	zmmTmp1 = ZmmReg2_m512;
	i:4 = 0;
	j:4 = 0;
	<loop>
	if (i >= 16) goto <loop_end>;
		if ((kreg >> i & 1) == 0) goto <skip>;
			n:4 = extractind(ZmmReg1,i*4);
			zmmTmp1 = insertind(zmmTmp1,n,j*4);
			j = j + 1;
		<skip>
		i = i + 1;
	goto <loop>;
	<loop_end>
	ZmmReg2_m512 = zmmTmp1;
}

:VPERMD ZmmReg1, vexVVVV_ZmmReg, ZmmReg2_m512 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F38) & $(VEX_W0) & vexVVVV_ZmmReg & kreg=0; byte=0x36; ZmmReg1 ... & ZmmReg2_m512
{
	zmmTmp1 = zext(0:4);
	i:4 = 0;
	<loop>
	if (i >= 16) goto <loop_end>;
		j:4 = extractind(vexVVVV_ZmmReg,i*4) & 0xF;
		n:4 = extractind(ZmmReg2_m512,j*4);
		zmmTmp1 = insertind(zmmTmp1,n,i*4);
		i = i + 1;
	goto <loop>;
	<loop_end>
	ZmmReg1 = zmmTmp1;
}

:VPMINSD ZmmReg1, vexVVVV_ZmmReg, ZmmReg2_m512 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F38) & $(VEX_W0) & vexVVVV_ZmmReg; byte=0x39; ZmmReg1 ... & ZmmReg2_m512
{
	zmmTmp1 = ZmmReg2_m512;
	if (vexVVVV_ZmmReg[0,32] s>= zmmTmp1[0,32]) goto <skip0>;
		ZmmReg1[0,32] = vexVVVV_ZmmReg[0,32];
		goto <end0>;
	<skip0>
		ZmmReg1[0,32] = zmmTmp1[0,32];
	<end0>
	if (vexVVVV_ZmmReg[32,32] s>= zmmTmp1[32,32]) goto <skip1>;
		ZmmReg1[32,32] = vexVVVV_ZmmReg[32,32];
		goto <end1>;
	<skip1>
		ZmmReg1[32,32] = zmmTmp1[32,32];
	<end1>
	if (vexVVVV_ZmmReg[64,32] s>= zmmTmp1[64,32]) goto <skip2>;
		ZmmReg1[64,32] = vexVVVV_ZmmReg[64,32];
		goto <end2>;
	<skip2>
		ZmmReg1[64,32] = zmmTmp1[64,32];
	<end2>
	if (vexVVVV_ZmmReg[96,32] s>= zmmTmp1[96,32]) goto <skip3>;
		ZmmReg1[96,32] = vexVVVV_ZmmReg[96,32];
		goto <end3>;
	<skip3>
		ZmmReg1[96,32] = zmmTmp1[96,32];
	<end3>
	if (vexVVVV_ZmmReg[128,32] s>= zmmTmp1[128,32]) goto <skip4>;
		ZmmReg1[128,32] = vexVVVV_ZmmReg[128,32];
		goto <end4>;
	<skip4>
		ZmmReg1[128,32] = zmmTmp1[128,32];
	<end4>
	if (vexVVVV_ZmmReg[160,32] s>= zmmTmp1[160,32]) goto <skip5>;
		ZmmReg1[160,32] = vexVVVV_ZmmReg[160,32];
		goto <end5>;
	<skip5>
		ZmmReg1[160,32] = zmmTmp1[160,32];
	<end5>
	if (vexVVVV_ZmmReg[192,32] s>= zmmTmp1[192,32]) goto <skip6>;
		ZmmReg1[192,32] = vexVVVV_ZmmReg[192,32];
		goto <end6>;
	<skip6>
		ZmmReg1[192,32] = zmmTmp1[192,32];
	<end6>
	if (vexVVVV_ZmmReg[224,32] s>= zmmTmp1[224,32]) goto <skip7>;
		ZmmReg1[224,32] = vexVVVV_ZmmReg[224,32];
		goto <end7>;
	<skip7>
		ZmmReg1[224,32] = zmmTmp1[224,32];
	<end7>
	if (vexVVVV_ZmmReg[256,32] s>= zmmTmp1[256,32]) goto <skip8>;
		ZmmReg1[256,32] = vexVVVV_ZmmReg[256,32];
		goto <end8>;
	<skip8>
		ZmmReg1[256,32] = zmmTmp1[256,32];
	<end8>
	if (vexVVVV_ZmmReg[288,32] s>= zmmTmp1[288,32]) goto <skip9>;
		ZmmReg1[288,32] = vexVVVV_ZmmReg[288,32];
		goto <end9>;
	<skip9>
		ZmmReg1[288,32] = zmmTmp1[288,32];
	<end9>
	if (vexVVVV_ZmmReg[320,32] s>= zmmTmp1[320,32]) goto <skip10>;
		ZmmReg1[320,32] = vexVVVV_ZmmReg[320,32];
		goto <end10>;
	<skip10>
		ZmmReg1[320,32] = zmmTmp1[320,32];
	<end10>
	if (vexVVVV_ZmmReg[352,32] s>= zmmTmp1[352,32]) goto <skip11>;
		ZmmReg1[352,32] = vexVVVV_ZmmReg[352,32];
		goto <end11>;
	<skip11>
		ZmmReg1[352,32] = zmmTmp1[352,32];
	<end11>
	if (vexVVVV_ZmmReg[384,32] s>= zmmTmp1[384,32]) goto <skip12>;
		ZmmReg1[384,32] = vexVVVV_ZmmReg[384,32];
		goto <end12>;
	<skip12>
		ZmmReg1[384,32] = zmmTmp1[384,32];
	<end12>
	if (vexVVVV_ZmmReg[416,32] s>= zmmTmp1[416,32]) goto <skip13>;
		ZmmReg1[416,32] = vexVVVV_ZmmReg[416,32];
		goto <end13>;
	<skip13>
		ZmmReg1[416,32] = zmmTmp1[416,32];
	<end13>
	if (vexVVVV_ZmmReg[448,32] s>= zmmTmp1[448,32]) goto <skip14>;
		ZmmReg1[448,32] = vexVVVV_ZmmReg[448,32];
		goto <end14>;
	<skip14>
		ZmmReg1[448,32] = zmmTmp1[448,32];
	<end14>
	if (vexVVVV_ZmmReg[480,32] s>= zmmTmp1[480,32]) goto <skip15>;
		ZmmReg1[480,32] = vexVVVV_ZmmReg[480,32];
		goto <end15>;
	<skip15>
		ZmmReg1[480,32] = zmmTmp1[480,32];
	<end15>
}

:VPSHUFD ZmmReg1, ZmmReg2_m512, imm8 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F) & $(VEX_W0); byte=0x70; ZmmReg1 ... & ZmmReg2_m512; imm8 & OrderD0 & OrderD1 & OrderD2 & OrderD3
{
	zmmTmp1 = ZmmReg2_m512;

	zmmTmp2 = zmmTmp1 >> OrderD0;
	ZmmReg1[0,32] = zmmTmp2:4;

	zmmTmp2 = zmmTmp1 >> OrderD1;
	ZmmReg1[32,32] = zmmTmp2:4;

	zmmTmp2 = zmmTmp1 >> OrderD2;
	ZmmReg1[64,32] = zmmTmp2:4;

	zmmTmp2 = zmmTmp1 >> OrderD3;
	ZmmReg1[96,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 128) >> OrderD0;
	ZmmReg1[128,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 128) >> OrderD1;
	ZmmReg1[160,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 128) >> OrderD2;
	ZmmReg1[192,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 128) >> OrderD3;
	ZmmReg1[224,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 256) >> OrderD0;
	ZmmReg1[256,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 256) >> OrderD1;
	ZmmReg1[288,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 256) >> OrderD2;
	ZmmReg1[320,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 256) >> OrderD3;
	ZmmReg1[352,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 384) >> OrderD0;
	ZmmReg1[384,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 384) >> OrderD1;
	ZmmReg1[416,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 384) >> OrderD2;
	ZmmReg1[448,32] = zmmTmp2:4;

	zmmTmp2 = (zmmTmp1 >> 384) >> OrderD3;
	ZmmReg1[480,32] = zmmTmp2:4;
}

:VPTERNLOGD ZmmReg1, vexVVVV_ZmmReg, ZmmReg2_m512, imm8 is $(EVEX_NONE) & $(EVEX_L512) & $(PRE_66) & $(VEX_0F3A) & $(VEX_W0) & vexVVVV_ZmmReg; byte=0x25; ZmmReg1 ... & ZmmReg2_m512; imm8
{
	zmmTmp1 = ZmmReg1;
	i:4 = 0;
	<loop1>
	if (i >= 16) goto <loop1_end>;
		j:4 = 0;
		n:4 = 0;
		a:4 = extractind(ZmmReg1,i*4);
		b:4 = extractind(vexVVVV_ZmmReg,i*4);
		c:4 = extractind(ZmmReg2_m512,i*4);
		<loop2>
		if (j >= 32) goto <loop2_end>;
			k:4 = ((a >> j & 1) << 2) + ((b >> j & 1) << 1) + (c >> j & 1);
			d:4 = (imm8 >> k) & 1;
			n = n | (d << j);
			j = j + 1;
		goto <loop2>;
		<loop2_end>
		zmmTmp1 = insertind(zmmTmp1,n,i*4);
		i = i + 1;
	goto <loop1>;
	<loop1_end>
	ZmmReg1 = zmmTmp1;
}
